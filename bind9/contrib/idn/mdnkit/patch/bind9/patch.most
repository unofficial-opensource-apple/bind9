--- README.mdnkit.orig	Thu Aug  8 16:53:40 2002
+++ README.mdnkit	Thu Aug  8 16:53:40 2002
@@ -0,0 +1,124 @@
+
+			BIND-9 MDN patch
+
+	       Japan Network Information Center (JPNIC)
+
+
+* What is this patch for?
+
+This patch adds multilingual domain name (MDN) support to BIND-9.
+You'll get multilingualized version of dig/host/nslookup commands.
+
+    + mulltilingualized dig/host/nslookup
+	dig/host/nslookup accepts non-ASCII domain names in the local
+	codeset (such as Shift JIS, Big5 or ISO8859-1) determined by
+	the locale information.  The domain names are normalized and
+	converted to the encoding on the DNS protocol, and sent to DNS
+	servers.  The replies are converted back to the local codeset
+	and displayed.
+
+
+* Compilation & installation
+
+0. Prerequisite
+
+You have to build and install mDNkit before building this patched version
+of bind-9.
+
+1. Running configure script
+
+Run `configure' in the top directory.  See `README' for the
+configuration options.
+
+This patch adds the following 4 options to `configure'.  You should
+at least specify `--with-mdn' option to enable MDN support.
+
+    --with-mdn[=MDN_PREFIX]
+	To enable MDN support, you have to specify `--with-mdn' option.
+	The argument MDN_PREFIX is the install prefix of mDNkit.  If
+	MDN_PREFIX is omitted, PREFIX (derived from `--prefix=PREFIX')
+	is assumed.
+
+    --with-libiconv[=LIBICONV_PREFIX]
+	Specify this option if mDNkit you have installed links GNU
+	libiconv.  The argument LIBICONV_PREFIX is install prefix of
+	GNU libiconv.  If the argument is omitted, PREFIX (derived
+	from `--prefix=PREFIX') is assumed.
+
+	`--with-libiconv' is shorthand option for GNU libiconv.
+
+	    --with-libiconv=/usr/local
+
+	This is equivalent to:
+
+	    --with-iconv='-L/usr/local/lib -R/usr/local/lib -liconv'
+
+	`--with-libiconv' assumes that your C compiler has `-R'
+	option, and that the option adds the specified run-time path
+	to an exacutable binary.  If `-R' option of your compiler has
+	different meaning, or your compiler lacks the option, you
+	should use `--with-iconv' option instead.  Binary command
+	without run-time path information might be unexecutable.
+	In that case, you would see an error message like:
+
+	    error in loading shared libraries: libiconv.so.2: cannot
+	    open shared object file
+
+	If both `--with-libiconv' and `--with-iconv' options are
+	specified, `--with-iconv' is prior to `--with-libiconv'.
+
+    --with-iconv=ICONV_LIBSPEC
+	If your libc doens't provide iconv(), you need to specify the
+	library containing iconv() with this option.  `ICONV_LIBSPEC'
+	is the argument(s) to `cc' or `ld' to link the library, for
+	example, `--with-iconv="-L/usr/local/lib -liconv"'.
+	You don't need to specify the header file directory for "iconv.h"
+	to the compiler, as it isn't included directly by bind-9 with
+	this patch.
+
+    --with-mdnlib=MDN_LIBSPEC
+	With this option, you can explicitly specify the argument(s)
+	to `cc' or `ld' to link the mDNkit's library, `libmdn'.  If
+	this option is not specified, `-L${PREFIX}/lib -lmdn' is
+	assumed, where ${PREFIX} is the installation prefix specified
+	with `--with-mdn' option above.  You may need to use this
+	option to specify extra argments, for example,
+	`--with-mdnlib="-L/usr/local/lib -R/usr/local/lib -lmdn"'.
+
+Please consult `README' for other configuration options.
+
+Note that if you want to specify some extra header file directories,
+you should use the environment variable STD_CINCLUDES instead of
+CFLAGS, as described in README.
+
+2. Compilation and installation
+
+After running "configure", just do
+
+	make
+	make install
+
+for compiling and installing.
+
+3. Resolver configuration
+
+To handle multilingual domain names, you have to specify the
+properties like:
+	+ name encoding used in DNS protocol data
+	+ normalization (NAMEPREP) schemes
+These properties are specified by the mDNkit's configuration file,
+"mdn.conf".  You have to create and set up the file properly.  The
+pathname of the file and contents are described in the manual
+"mdn.conf".
+
+
+* Contact information
+
+Please see http//www.nic.ad.jp/jp/research/idn/ for the latest news
+about mDNkit and this patch.
+
+Bug reports and comments on this kit should be sent to
+mdnkit-bugs@nic.ad.jp and idn-cmt@nic.ad.jp, respectively.
+
+
+; $Id: patch.most,v 1.1.1.2 2003/03/18 19:18:25 rbraun Exp $
--- config.h.in.orig	Thu Aug  8 15:02:43 2002
+++ config.h.in	Thu Aug  8 16:53:40 2002
@@ -142,4 +142,7 @@
 #undef HAVE_STRERROR
 
+/* Define if you have the setlocale function.  */
+#undef HAVE_SETLOCALE
+
 /* Define if you have the <dlfcn.h> header file.  */
 #undef HAVE_DLFCN_H
@@ -151,4 +154,7 @@
 #undef HAVE_LINUX_CAPABILITY_H
 
+/* Define if you have the <locale.h> header file.  */
+#undef HAVE_LOCALE_H
+
 /* Define if you have the <sys/prctl.h> header file.  */
 #undef HAVE_SYS_PRCTL_H
@@ -177,2 +183,6 @@
 /* Define if you have the socket library (-lsocket).  */
 #undef HAVE_LIBSOCKET
+
+/* define if mDNkit support is to be included. */
+#undef WITH_MDN
+
--- configure.in.orig	Thu Aug  8 16:39:32 2002
+++ configure.in	Thu Aug  8 16:53:40 2002
@@ -1682,4 +1682,77 @@
 
 #
+# MDN support
+#
+AC_ARG_WITH(mdn,
+	[  --with-mdn[=MPREFIX]   enable MDN support using mDNkit [default PREFIX]],
+	use_mdn="$withval", use_mdn="no")
+case "$use_mdn" in
+yes)
+	if test X$prefix = XNONE ; then
+		mdn_path=/usr/local
+	else
+		mdn_path=$prefix
+	fi
+	;;
+no)
+	;;
+*)
+	mdn_path="$use_mdn"
+	;;
+esac
+
+iconvinc=
+iconvlib=
+AC_ARG_WITH(libiconv,
+	[  --with-libiconv[=IPREFIX]   GNU libiconv are in IPREFIX [default PREFIX]],
+	use_libiconv="$withval", use_libiconv="no")
+case "$use_libiconv" in
+yes)
+	if test X$prefix = XNONE ; then
+		iconvlib="-L/usr/local/lib -R/usr/local/lib -liconv"
+	else
+		iconvlib="-L$prefix/lib -R$prefix/lib -liconv"
+	fi
+	;;
+no)
+	iconvlib=
+	;;
+*)
+	iconvlib="-L$use_libiconv/lib -R$use_libiconv/lib -liconv"
+	;;
+esac
+
+AC_ARG_WITH(iconv,
+	[  --with-iconv[=LIBSPEC]   specify iconv library [default -liconv]],
+	iconvlib="$withval")
+case "$iconvlib" in
+no)
+	iconvlib=
+	;;
+yes)
+	iconvlib=-liconv
+	;;
+esac
+
+AC_ARG_WITH(mdnlib,
+	[  --with-mdnlib=ARG    specify libmdn],
+	mdnlib="$withval", mdnlib="no")
+if test "$mdnlib" = yes; then
+	AC_MSG_ERROR([You must specify ARG for --with-mdnlib.])
+fi
+
+if test "$use_mdn" != no; then
+	AC_DEFINE(WITH_MDN, 1, [define if mDNkit support is to be included.])
+	STD_CINCLUDES="$STD_CINCLUDES -I$mdn_path/include"
+	if test "$mdnlib" != no; then
+		LIBS="$mdnlib $iconvlib $LIBS"
+	else
+		LIBS="-L$mdn_path/lib -lmdn $iconvlib $LIBS"
+	fi
+fi
+AC_CHECK_HEADERS(locale.h)
+AC_CHECK_FUNCS(setlocale)
+
+#
 # Substitutions
 #
--- bin/dig/dig.1.orig	Thu Aug  8 15:03:50 2002
+++ bin/dig/dig.1	Thu Aug  8 16:53:40 2002
@@ -74,5 +74,5 @@
 .TP
 \fBtype\fR
-indicates what type of query is required \(em
+indicates what type of query is required 
 ANY, A, MX, SIG, etc.
 \fItype\fR can be any valid query type. If no
@@ -350,4 +350,15 @@
 will not print the initial query when it looks up the NS records for
 isc.org.
+.SH "MDN SUPPORT"
+.PP
+If \fBdig\fR has been built with mdn support, it can
+accept and display non-ASCII domain names.
+\fBdig\fR appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the MDN support for some reason, defines
+the \fBMDN_DISABLE\fR environment variable.
+The MDN support is disabled if the the variable is set when 
+\fBdig\fR runs.
 .SH "FILES"
 .PP
--- bin/dig/dig.c.orig	Thu Aug  8 15:03:54 2002
+++ bin/dig/dig.c	Thu Aug  8 16:53:40 2002
@@ -1308,4 +1308,9 @@
 		ISC_LIST_APPEND(lookup_list, lookup, link);
 	}
+
+#ifdef WITH_MDN
+		if (getenv(MDN_DISABLE_ENVVAR_NAME) != NULL)
+			lookup->mdn = ISC_FALSE;
+#endif
 }
 
--- bin/dig/dig.docbook.orig	Thu Aug  8 15:03:57 2002
+++ bin/dig/dig.docbook	Thu Aug  8 16:53:40 2002
@@ -524,4 +524,19 @@
 
 <refsect1>
+<title>MDN SUPPORT</title>
+<para>
+If <command>dig</command> has been built with mdn support, it can
+accept and display non-ASCII domain names.
+<command>dig</command> appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the MDN support for some reason, defines
+the <envar>MDN_DISABLE</envar> environment variable.
+The MDN support is disabled if the the variable is set when 
+<command>dig</command> runs.
+</para>
+</refsect1>
+
+<refsect1>
 <title>FILES</title>
 <para>
--- bin/dig/dighost.c.orig	Thu Aug  8 15:04:07 2002
+++ bin/dig/dighost.c	Thu Aug  8 16:53:40 2002
@@ -33,4 +33,15 @@
 #include <limits.h>
 
+#ifdef HAVE_LOCALE_H
+#include <locale.h>
+#endif
+
+#ifdef WITH_MDN
+#include <mdn/result.h>
+#include <mdn/log.h>
+#include <mdn/resconf.h>
+#include <mdn/res.h>
+#endif
+
 #include <dns/byaddr.h>
 #include <dns/fixedname.h>
@@ -131,4 +142,18 @@
 dig_lookup_t *current_lookup = NULL;
 
+#ifdef WITH_MDN
+mdn_resconf_t mdnconf;
+
+static void	      initialize_mdn(void);
+static isc_result_t   output_filter(isc_buffer_t *buffer,
+				    unsigned int used_org,
+				    isc_boolean_t absolute);
+static mdn_result_t   append_textname(char *name, const char *origin,
+				      size_t namesize);
+static void	      mdn_check_result(mdn_result_t r, const char *msg);
+
+#define MAXDLEN               256
+#endif
+
 /*
  * Apply and clear locks at the event level in global task.
@@ -366,4 +391,7 @@
 	looknew->servfail_stops = ISC_TRUE;
 	looknew->besteffort = ISC_TRUE;
+#ifdef WITH_MDN
+	looknew->mdn = ISC_TRUE;
+#endif
 	looknew->dnssec = ISC_FALSE;
 	looknew->udpsize = 0;
@@ -427,4 +455,7 @@
 	looknew->servfail_stops = lookold->servfail_stops;
 	looknew->besteffort = lookold->besteffort;
+#ifdef WITH_MDN
+	looknew->mdn = ISC_TRUE;
+#endif
 	looknew->dnssec = lookold->dnssec;
 	looknew->udpsize = lookold->udpsize;
@@ -649,4 +680,8 @@
 	}
 
+#ifdef WITH_MDN
+	initialize_mdn();
+#endif
+
 	if (keyfile[0] != 0)
 		setup_file_key();
@@ -1169,4 +1204,15 @@
 	dns_compress_t cctx;
 	char store[MXNAME];
+#ifdef WITH_MDN
+	mdn_result_t mr;
+	char utf8_textname[MXNAME], utf8_origin[MXNAME], idn_textname[MXNAME];
+#endif
+
+#ifdef WITH_MDN
+        if (lookup->mdn == ISC_TRUE)
+		dns_name_settotextfilter(output_filter);
+        else
+		dns_name_settotextfilter(NULL);
+#endif
 
 	REQUIRE(lookup != NULL);
@@ -1197,4 +1243,19 @@
 			sizeof(lookup->onamespace));
 
+#ifdef WITH_MDN
+	if (lookup->mdn) {
+		/*
+		 * We cannot convert `textname' and `origin' separately.
+		 * `textname' doesn't contain TLD, but local mapping needs
+		 * TLD.
+		 */
+		mr = mdn_res_nameconv(mdnconf, "ld", lookup->textname,
+				      utf8_textname, sizeof(utf8_textname));
+		mdn_check_result(mr, "convert textname to UTF-8");
+	} else {
+		strcpy(utf8_textname, lookup->textname);
+	}
+#endif
+
 	/*
 	 * If the name has too many dots, force the origin to be NULL
@@ -1205,4 +1266,11 @@
 	 */
 	/* XXX New search here? */
+#ifdef WITH_MDN
+	if ((count_dots(utf8_textname) >= ndots) || !usesearch)
+		lookup->origin = NULL; /* Force abs lookup */
+	else if (lookup->origin == NULL && lookup->new_search && usesearch) {
+		lookup->origin = ISC_LIST_HEAD(search_list);
+	}
+#else
 	if ((count_dots(lookup->textname) >= ndots) || !usesearch)
 		lookup->origin = NULL; /* Force abs lookup */
@@ -1210,5 +1278,29 @@
 		lookup->origin = ISC_LIST_HEAD(search_list);
 	}
+#endif
+
+#ifdef WITH_MDN
+	if (lookup->mdn) {
+		if (lookup->origin != NULL) {
+			mr = mdn_res_nameconv(mdnconf, "ld",
+					      lookup->origin->origin,
+					      utf8_origin,
+					      sizeof(utf8_origin));
+			mdn_check_result(mr, "convert origin to UTF-8");
+			mr = append_textname(utf8_textname, utf8_origin,
+					     sizeof(utf8_textname));
+			mdn_check_result(mr, "append origin to textname");
+		}
+		mr = mdn_res_nameconv(mdnconf, "MNI", utf8_textname,
+				      idn_textname, sizeof(idn_textname));
+		mdn_check_result(mr, "convert UTF-8 textname to IDN encoding");
+	}
+#endif
+
+#ifdef WITH_MDN
+	if (lookup->origin != NULL && !lookup->mdn) {
+#else
 	if (lookup->origin != NULL) {
+#endif
 		debug("trying origin %s", lookup->origin->origin);
 		result = dns_message_gettempname(lookup->sendmsg,
@@ -1254,4 +1346,15 @@
 		if (lookup->trace && lookup->trace_root)
 			dns_name_clone(dns_rootname, lookup->name);
+#ifdef WITH_MDN
+		else if (lookup->mdn) {
+			len = strlen(idn_textname);
+			isc_buffer_init(&b, idn_textname, len);
+			isc_buffer_add(&b, len);
+			result = dns_name_fromtext(lookup->name, &b,
+						   dns_rootname,
+						   ISC_FALSE,
+						   &lookup->namebuf);
+		}
+#endif
 		else {
 			len = strlen(lookup->textname);
@@ -2664,2 +2767,115 @@
 		isc_mem_destroy(&mctx);
 }
+
+#ifdef WITH_MDN
+static void
+initialize_mdn(void) {
+	mdn_result_t r;
+
+#ifdef HAVE_SETLOCALE
+	/* Set locale */
+	(void)setlocale(LC_ALL, "");
+#endif
+
+	/* General initialization. */
+	r = mdn_resconf_initialize();
+	if (r != mdn_success)
+		fatal("mdn initialization failed: %s",
+		      mdn_result_tostring(r));
+
+	/* Create configuration context. */
+	r = mdn_resconf_create(&mdnconf);
+	if (r != mdn_success)
+		fatal("mdn resconf initialization failed: %s",
+		      mdn_result_tostring(r));
+
+
+	/* Load mdn configuration file. */
+	r = mdn_resconf_loadfile(mdnconf, NULL);
+	if (r != mdn_success)
+		fatal("mdn configuration loading failed: %s",
+		      mdn_result_tostring(r));
+
+	/* Set domain name -> text post-conversion filter. */
+	dns_name_settotextfilter(output_filter);
+}
+
+static isc_result_t
+output_filter(isc_buffer_t *buffer, unsigned int used_org,
+	      isc_boolean_t absolute)
+{
+	char tmp1[MAXDLEN], tmp2[MAXDLEN];
+	size_t fromlen, tolen;
+	isc_boolean_t end_with_dot;
+
+	/*
+	 * Copy contents of 'buffer' to 'tmp1', supply trailing dot
+	 * if 'absolute' is true, and terminate with NUL.
+	 */
+	fromlen = isc_buffer_usedlength(buffer) - used_org;
+	if (fromlen >= MAXDLEN)
+		return (ISC_R_SUCCESS);
+	memcpy(tmp1, (char *)isc_buffer_base(buffer) + used_org, fromlen);
+	end_with_dot = (tmp1[fromlen - 1] == '.') ? ISC_TRUE : ISC_FALSE;
+	if (absolute && !end_with_dot) {
+		fromlen++;
+		if (fromlen >= MAXDLEN)
+			return (ISC_R_SUCCESS);
+		tmp1[fromlen - 1] = '.';
+	}
+	tmp1[fromlen] = '\0';
+
+	/*
+	 * Convert contents of 'tmp1' to local encoding.
+	 */
+	if (mdn_res_nameconv(mdnconf, "i!NL", tmp1, tmp2, MAXDLEN)
+	    != mdn_success)
+		return (ISC_R_SUCCESS);
+	strcpy(tmp1, tmp2);
+
+	/*
+	 * Copy the converted contents in 'tmp1' back to 'buffer'.
+	 * If we have appended trailing dot, remove it.
+	 */
+	tolen = strlen(tmp1);
+	if (absolute && !end_with_dot && tmp1[tolen - 1] == '.')
+		tolen--;
+
+	if (isc_buffer_length(buffer) < used_org + tolen)
+		return (ISC_R_NOSPACE);
+
+	isc_buffer_subtract(buffer, isc_buffer_usedlength(buffer) - used_org);
+	memcpy(isc_buffer_used(buffer), tmp1, tolen);
+	isc_buffer_add(buffer, tolen);
+
+	return (ISC_R_SUCCESS);
+}
+
+static mdn_result_t
+append_textname(char *name, const char *origin, size_t namesize) {
+	size_t namelen = strlen(name);
+	size_t originlen = strlen(origin);
+
+	/* Already absolute? */
+	if (namelen > 0 && name[namelen - 1] == '.')
+		return mdn_success;
+
+	/* Append dot and origin */
+
+	if (namelen + 1 + originlen >= namesize)
+		return mdn_buffer_overflow;
+
+	name[namelen++] = '.';
+	(void)strcpy(name + namelen, origin);
+	return mdn_success;
+}
+
+static void
+mdn_check_result(mdn_result_t r, const char *msg) {
+	if (r != mdn_success) {
+		exitcode = 1;
+		fatal("%s: %s", msg, mdn_result_tostring(r));
+	}
+}
+
+#endif /* WITH_MDN */
--- bin/dig/host.1.orig	Thu Aug  8 15:04:08 2002
+++ bin/dig/host.1	Thu Aug  8 16:53:40 2002
@@ -88,6 +88,6 @@
 .PP
 Non-recursive queries can be made via the \fB-r\fR option.
-Setting this option clears the \fBRD\fR \(em recursion
-desired \(em bit in the query which \fBhost\fR makes.
+Setting this option clears the \fBRD\fR recursion
+desired bit in the query which \fBhost\fR makes.
 This should mean that the name server receiving the query will not
 attempt to resolve \fIname\fR. The
@@ -121,4 +121,15 @@
 will be set to the number of seconds given by the hardware's maximum
 value for an integer quantity.
+.SH "MDN SUPPORT"
+.PP
+If \fBhost\fR has been built with mdn support, it can
+accept and display non-ASCII domain names.
+\fBhost\fR appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the MDN support for some reason, defines
+the \fBMDN_DISABLE\fR environment variable.
+The MDN support is disabled if the the variable is set when
+\fBhost\fR runs.
 .SH "FILES"
 .PP
--- bin/dig/host.c.orig	Thu Aug  8 15:04:10 2002
+++ bin/dig/host.c	Thu Aug  8 16:53:40 2002
@@ -667,4 +667,9 @@
 	ISC_LIST_APPEND(lookup_list, lookup, link);
 
+#ifdef WITH_MDN
+	if (getenv(MDN_DISABLE_ENVVAR_NAME) != NULL)
+		lookup->mdn = ISC_FALSE;
+#endif
+
 	usesearch = ISC_TRUE;
 }
--- bin/dig/host.docbook.orig	Thu Aug  8 15:04:11 2002
+++ bin/dig/host.docbook	Thu Aug  8 16:53:41 2002
@@ -182,4 +182,19 @@
 
 <refsect1>
+<title>MDN SUPPORT</title>
+<para>
+If <command>host</command> has been built with mdn support, it can
+accept and display non-ASCII domain names.
+<command>host</command> appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the MDN support for some reason, defines
+the <envar>MDN_DISABLE</envar> environment variable.
+The MDN support is disabled if the the variable is set when
+<command>host</command> runs.
+</para>
+</refsect1>
+
+<refsect1>
 <title>FILES</title>
 <para>
--- bin/dig/nslookup.c.orig	Thu Aug  8 15:04:14 2002
+++ bin/dig/nslookup.c	Thu Aug  8 16:53:41 2002
@@ -660,4 +660,8 @@
 	lookup->origin = NULL;
 	ISC_LIST_INIT(lookup->my_server_list);
+#ifdef WITH_MDN
+	if (getenv(MDN_DISABLE_ENVVAR_NAME) != NULL)
+		lookup->mdn = ISC_FALSE;
+#endif
 	debug("looking up %s", lookup->textname);
 }
--- bin/dig/include/dig/dig.h.orig	Thu Aug  8 15:04:15 2002
+++ bin/dig/include/dig/dig.h	Thu Aug  8 16:53:41 2002
@@ -75,4 +75,11 @@
  */
 
+/*
+ * Name of environment variable which disables MDN support if defined.
+ */
+#ifdef WITH_MDN
+#define MDN_DISABLE_ENVVAR_NAME "MDN_DISABLE"
+#endif
+
 ISC_LANG_BEGINDECLS
 
@@ -110,4 +117,7 @@
 		new_search,
 		besteffort,
+#ifdef WITH_MDN
+		mdn,
+#endif
 		dnssec;
 	char textname[MXNAME]; /* Name we're going to be looking up */
--- lib/dns/name.c.orig	Thu Aug  8 15:04:25 2002
+++ lib/dns/name.c	Thu Aug  8 16:53:41 2002
@@ -195,4 +195,11 @@
 dns_name_t *dns_wildcardname = &wild;
 
+#ifdef WITH_MDN
+/*
+ * dns_name_t to text post-conversion procedure.
+ */
+static dns_name_totextfilter_t totext_filter_proc = NULL;
+#endif
+
 static void
 set_offsets(const dns_name_t *name, unsigned char *offsets,
@@ -1685,4 +1692,7 @@
 	isc_boolean_t saw_root = ISC_FALSE;
 	char num[4];
+#ifdef WITH_MDN
+	unsigned int oused = target->used;
+#endif
 
 	/*
@@ -1862,4 +1872,8 @@
 	isc_buffer_add(target, tlen - trem);
 
+#ifdef WITH_MDN
+	if (totext_filter_proc != NULL)
+		return ((*totext_filter_proc)(target, oused, saw_root));
+#endif
 	return (ISC_R_SUCCESS);
 }
@@ -3326,2 +3340,8 @@
 }
 
+#ifdef WITH_MDN
+void
+dns_name_settotextfilter(dns_name_totextfilter_t proc) {
+	totext_filter_proc = proc;
+}
+#endif
--- lib/dns/include/dns/name.h.orig	Thu Aug  8 15:02:06 2002
+++ lib/dns/include/dns/name.h	Thu Aug  8 16:53:41 2002
@@ -220,4 +220,15 @@
 #define DNS_NAME_MAXWIRE 255
 
+#ifdef WITH_MDN
+/*
+ * Text output filter procedure.
+ * 'target' is the buffer to be converted.  The region to be converted
+ * is from 'buffer'->base + 'used_org' to the end of the used region.
+ */
+typedef isc_result_t (*dns_name_totextfilter_t)(isc_buffer_t *target,
+						unsigned int used_org,
+						isc_boolean_t absolute);
+#endif
+
 /***
  *** Initialization
@@ -1245,4 +1256,12 @@
  *
  */
+
+#ifdef WITH_MDN
+void
+dns_name_settotextfilter(dns_name_totextfilter_t proc);
+/*
+ * Call 'proc' at the end of dns_name_totext.
+ */
+#endif /* WITH_MDN */
 
 #define DNS_NAME_FORMATSIZE (DNS_NAME_MAXTEXT + 1)
